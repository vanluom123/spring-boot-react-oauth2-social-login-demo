spring:
  rabbitmq:
    listener:
      simple:
        retry:
          enabled: true
          initial-interval: 3s
          max-attempts: 5
          max-interval: 10s
          multiplier: 2

  datasource:
    url: jdbc:mysql://localhost:3306/spring_social?useSSL=false
    username: root
    password: root

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update
      naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect

  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 782330301173-u95n2p5pc6obg6nim17bq7m4kmm861tt.apps.googleusercontent.com
            clientSecret: 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
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - profile
          facebook:
            clientId: 1222628668396767
            clientSecret: 0363e2043f9684e828518c3710c97ce0
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - email
              - public_profile
          github:
            clientId: 2b4c5fae6d2623f5ead4
            clientSecret: 8d60b7163537223dce8a0a9334517bdca076f72d
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}"
            scope:
              - user:email
              - read:user
        provider:
          facebook:
            authorizationUri: https://www.facebook.com/v3.0/dialog/oauth
            tokenUri: https://graph.facebook.com/v3.0/oauth/access_token
            userInfoUri: https://graph.facebook.com/v3.0/me?fields=id,first_name,middle_name,last_name,name,email,verified,is_verified,picture.width(250).height(250)
app:
  auth:
    tokenSecret: 04ca023b39512e46d0c2cf4b48d5aac61d34302994c87ed4eff225dcf3b0a218739f3897051a057f9b846a69ea2927a587044164b7bae5e1306219d50b588cb1
    tokenExpirationMsec: 864000000
  cors:
    allowedOrigins: http://localhost:3000,http://localhost:8080
  oauth2:
    # After successfully authenticating with the OAuth2 Provider,
    # we'll be generating an auth token for the user and sending the token to the
    # redirectUri mentioned by the client in the /oauth2/authorize request.
    # We're not using cookies because they won't work well in mobile clients.
    authorizedRedirectUris:
      - http://localhost:3000/oauth2/redirect
      - myandroidapp://oauth2/redirect
      - myiosapp://oauth2/redirect

littlecrochet:
  rabbitmq:
    connection:
      channel-checkout-timeout: 5000
      connection-timeout: 10000
    dead-letter:
      dead-letter-exchange: deadLetterExchange
      dead-letter-queue: deadLetterQueue
      dead-letter-routingKey: deadLetter
      dead-letter-exchange-header: x-dead-letter-exchange
      dead-letter-routingKey-header: x-dead-letter-routing-key
    exchange: littlecrochet-direct-exchange
    queue: littlecrochet.queue
    routingkey: littlecrochet
    uri: ${CLOUDAMQP_URL}
    username: ${CLOUDAMQP_USERNAME}
    password: ${CLOUDAMQP_PASSWORD}
    virtual-host: /
